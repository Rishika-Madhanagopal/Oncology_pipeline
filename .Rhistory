url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
par(mfrow=c(1,2))
hist(fibro$Time, col="grey", main="before",
freq=TRUE, xlab="Reduction", ylab="Drugs")
data = read.csv(url, header=TRUE)
data = read.csv(url, header=TRUE)
data = read.csv(url, header=TRUE)
data = read.csv(url, header=TRUE)
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
View(data)
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
attach(data)
boxplot(hospital.drug, ylab="recduction")
url <- "http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/atp.txt"
data <- read.table(url, header=TRUE)
View(data)
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
View(data)
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
attach(data)
boxplot(hospital.drug~Hospital+Drug, ylab="recduction")
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
attach(data)
boxplot(hospital~Hospital+Drug, ylab="recduction")
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
attach(data)
boxplot(Number~Hospital+Drug, ylab="recduction")
# Function to check if TATAAA occurs at a given position k in a string
detect_TATAAA <- function(input_string, k) {
motif <- "TATAAA"
substring <- substr(input_string, k, k + nchar(motif) - 1)
return(substring == motif)
}
View(detect_TATAAA)
View(detect_TATAAA)
Function to check if TATAAA occurs at a given position k in a string
# Function to check if TATAAA occurs at a given position k in a string
detect_TATAAA <- function(AGTC, k) {
motif <- "TATAAA"
substring <- substr(AGTC, k, k + nchar(motif) - 1)
return(substring == motif)
}
View(detect_TATAAA)
View(detect_TATAAA)
View(data)
# Function to check if TATAAA occurs at a given position k in a string
detect_TATAAA <- function(s, k) {
motif <- "TATAAA"
substring <- substr(s, k, k + nchar(motif) - 1)
return(substring == motif)
}
url="http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/hospitaldata.csv"
data = read.csv(url, header=TRUE)
summary(data)
str(data)
attach(data)
boxplot(Reduction~Drug+Hospital, ylab="Reduction")
my.url = url("http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/dna_correlation.dat")
load(my.url)
summary(my.url)
my.url <- url("http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/dna_correlation.dat")
load(my.url)
# Load the functions string.to.vec and vec.to.string
functions.url <- "http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/useful_functions.txt"
source(functions.url)
# Modify the function to output a vector of proportions for A, C, G, T
dna.proportions <- function(dna) {
dna.vec <- string.to.vec(dna)
count.A <- sum(dna.vec == "A")
count.C <- sum(dna.vec == "C")
count.G <- sum(dna.vec == "G")
count.T <- sum(dna.vec == "T")
proportions <- c(
proportion.A = count.A / length(dna.vec),
proportion.C = count.C / length(dna.vec),
proportion.G = count.G / length(dna.vec),
proportion.T = count.T / length(dna.vec)
)
return(proportions)
}
proportions_s <- dna.proportions(s)
print(proportions_s)
my.url <- url("http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/dna_correlation.dat")
load(my.url)
View(dna.trans)
# Load the functions string.to.vec and vec.to.string
functions.url <- "http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/useful_functions.txt"
source(functions.url)
View(vec.to.string)
View(string.to.vec)
View(random.dna)
View(dna.proportions)
my.url <- url("http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/dna_correlation.dat")
load(my.url)
# Function to calculate the proportions of each letter in a DNA sequence
dna.proportions <- function(dna) {
dna.vec <- string.to.vec(dna)
proportions <- numeric(4)  # Create a numeric vector to store proportions for A, C, G, T
# Calculate the count and proportion for each letter
proportions[1] <- sum(dna.vec == "A") / length(dna.vec)
proportions[2] <- sum(dna.vec == "C") / length(dna.vec)
proportions[3] <- sum(dna.vec == "G") / length(dna.vec)
proportions[4] <- sum(dna.vec == "T") / length(dna.vec)
return(proportions)
}
proportions <- dna.proportions(s)
proportions
sqrt(sample_var)
# Load the data
load(url("http://www.mas.ncl.ac.uk/~nak102/teaching/MAS8406/microarray.dat"))
# Assuming control.equ is vector of expression levels for equal expression
#extracting control probe data
control_equ = control.equ
# Calculate the sample variance
sample_var = var(control_equ)
# Prints the estimated population variance by using cat() function
cat("Estimated population variance (sigma^2):", sample_var, "\n")
sqrt(sample_var)
# Assuming control.diff is  vector of expression levels for differentially expressed genes
control_diff = control.diff
# Calculate the range (twice the half-width) as the estimator for "a"
estimator_a = diff(range(control_diff)) / 2
# Printing the estimated parameter value by using cat() function
cat("Estimated parameter (a) for the uniform distribution:", estimator_a, "\n")
pwd
install.packages("BiocManager")
library(maftools)
library(maftools)
library(maftools)
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
install.packages("BiocManager")
BiocManager::install("maftools")
clear
clearPushBack()
install.packages("BiocManager")
BiocManager::install("maftools")
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
library(maftools)
# Set the base directory where you downloaded the files
base_path <- "C:/Users/rishi/OneDrive/Desktop/Project 1/TGCA_data/gdc_download_20250510_171936.717599"
# List all .maf.gz files recursively
maf_files <- list.files(path = base_path, pattern = "*.maf.gz$", recursive = TRUE, full.names = TRUE)
# Check the files
print(paste("Found", length(maf_files), "MAF files"))
# Combine multiple MAF files into a single MAF object
combined_maf <- read.maf(maf = maf_files)
# Combine all MAF files into one big data.frame
maf_list <- lapply(maf_files, function(file) {
data.table::fread(file, sep = "\t", stringsAsFactors = FALSE, data.table = FALSE)
})
install.packages("R.utils")
# Combine all MAF files into one big data.frame
maf_list <- lapply(maf_files, function(file) {
data.table::fread(file, sep = "\t", stringsAsFactors = FALSE, data.table = FALSE)
})
# Bind all together
maf_merged <- do.call(rbind, maf_list)
# Write to a temporary combined file
combined_file <- file.path(base_path, "combined_maf_file.maf")
write.table(maf_merged, file = combined_file, sep = "\t", quote = FALSE, row.names = FALSE)
# Now read it with maftools
combined_maf <- read.maf(maf = combined_file)
# View summary
print(combined_maf)
# Plot mutation summary
plotmafSummary(maf = combined_maf)
# View summary
print(combined_maf)
# Plot mutation summary
plotmafSummary(maf = combined_maf)
# Plot oncoplot (top mutated genes)
oncoplot(maf = combined_maf, top = 10)
# If you want to save these as PDFs:
pdf("maf_summary.pdf")
plotmafSummary(maf = combined_maf)
dev.off()
pdf("oncoplot_top10.pdf")
oncoplot(maf = combined_maf, top = 10)
dev.off()
combined_maf <- read.maf(maf = base_path)
library(maftools)
install.packages("R.utils")
# Combine all MAF files into one big data.frame
maf_list <- lapply(maf_files, function(file) {
data.table::fread(file, sep = "\t", stringsAsFactors = FALSE, data.table = FALSE)
})
# Bind all together
maf_merged <- do.call(rbind, maf_list)
# Write to a temporary combined file
combined_file <- file.path(base_path, "combined_maf_file.maf")
write.table(maf_merged, file = combined_file, sep = "\t", quote = FALSE, row.names = FALSE)
# Now read it with maftools
combined_maf <- read.maf(maf = combined_file)
# View summary
print(combined_maf)
# Plot mutation summary
plotmafSummary(maf = combined_maf)
# Plot oncoplot (top mutated genes)
oncoplot(maf = combined_maf, top = 10)
# If you want to save these as PDFs:
pdf("maf_summary.pdf")
plotmafSummary(maf = combined_maf)
dev.off()
pdf("oncoplot_top10.pdf")
oncoplot(maf = combined_maf, top = 10)
dev.off()
# Combine all MAF files into one big data.frame
maf_list <- lapply(maf_files, function(file) {
data.table::fread(file, sep = "\t", stringsAsFactors = FALSE, data.table = FALSE)
})
# Bind all together
maf_merged <- do.call(rbind, maf_list)
# Write to a temporary combined file
combined_file <- file.path(base_path, "combined_maf_file.maf")
write.table(maf_merged, file = combined_file, sep = "\t", quote = FALSE, row.names = FALSE)
# Now read it with maftools
combined_maf <- read.maf(maf = combined_file)
# View summary
print(combined_maf)
# Plot mutation summary
plotmafSummary(maf = combined_maf)
# Plot oncoplot (top mutated genes)
oncoplot(maf = combined_maf, top = 10)
# If you want to save these as PDFs:
pdf("maf_summary.pdf")
plotmafSummary(maf = combined_maf)
dev.off()
pdf("oncoplot_top10.pdf")
oncoplot(maf = combined_maf, top = 10)
dev.off()
# Load necessary library
library(dplyr)
install.packages("dplyr")
library(dplyr)
# Define the base directory where CNV files are located
base_path <- "C:/Users/rishi/OneDrive/Desktop/Project 1/TGCA_data/gdc_CNV"
# Recursively list all CNV SEG files (excluding manifest)
cnv_files <- list.files(path = base_path, pattern = "\\.txt$", recursive = TRUE, full.names = TRUE)
cnv_files <- cnv_files[!grepl("MANIFEST", cnv_files, ignore.case = TRUE)]
# Function to read a single CNV SEG file, skipping metadata
read_cnv_file <- function(file_path) {
# Read the full file as lines
lines <- readLines(file_path)
# Find the header row by detecting the line containing "Segment_Mean"
header_line <- grep("Segment_Mean", lines)[1]
# If found, read data from that line
if (!is.na(header_line)) {
df <- read.delim(file_path, skip = header_line - 1, stringsAsFactors = FALSE)
df$source_file <- basename(file_path)
return(df)
} else {
warning(paste("Header not found in", file_path))
return(NULL)
}
}
# Apply the function to all files
cnv_list <- lapply(cnv_files, read_cnv_file)
# Combine all into one data frame
cnv_combined <- bind_rows(cnv_list)
# Check structure
cat("✅ Combined CNV dimensions:", dim(cnv_combined), "\n")
head(cnv_combined)
library(ggplot2)
# Distribution of CNV values
ggplot(cnv_combined, aes(x = Segment_Mean)) +
geom_histogram(bins = 50, fill = "steelblue", color = "black") +
theme_minimal() +
labs(title = "Distribution of CNV Segment Means")
Sys.which("g++")
Sys.which("make")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("g++")
Sys.which("make")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("g++")
Sys.which("make")
writeLines('PATH="${RTOOLS43_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
file.show("~/.Renviron")
Sys.which("make")
Sys.which("g++")
Sys.which("make")
Sys.which("g++")
install.packages("gprofiler2", dependencies = TRUE)
library(gprofiler2)
# Load top genes
top_genes <- read.csv("data/top_predictive_features.csv")$gene
setwd("C:\Users\rishi\OneDrive\Desktop\Project 1")
setwd("C:/Users/rishi/OneDrive/Desktop/Project 1")
library(gprofiler2)
# Load top genes
top_genes <- read.csv("data/top_predictive_features.csv")$gene
# Enrichment analysis
gostres <- gost(top_genes, organism = "hsapiens")
# View summary
head(gostres$result)
# Save enriched pathways
write.csv(gostres$result, "results/gprofiler_enrichment.csv", row.names = FALSE)
library(gprofiler2)
# Load top genes
top_genes <- read.csv("data/top_predictive_features.csv")$gene
# Enrichment analysis
gostres <- gost(top_genes, organism = "hsapiens")
# View summary
head(gostres$result)
# Save enriched pathways
write.csv(gostres$result, "result/gprofiler_enrichment.csv", row.names = FALSE)
# Load required libraries
library(gprofiler2)
library(dplyr)
library(ggplot2)
# === 1. Load top predictive genes ===
top_genes <- read.csv("data/top_predictive_features.csv")$gene
# === 2. Run g:Profiler enrichment (human genes) ===
gostres <- gost(top_genes, organism = "hsapiens")
# === 3. Flatten list columns before saving ===
gost_df <- gostres$result %>%
mutate(across(where(is.list), ~sapply(., toString)))
# === 4. Save results to CSV ===
dir.create("result", showWarnings = FALSE)
write.csv(gost_df, "result/gprofiler_enrichment.csv", row.names = FALSE)
# === 5. Plot top 10 enriched terms ===
top_terms <- gost_df %>%
arrange(p_value) %>%
slice(1:10) %>%
mutate(term_name = factor(term_name, levels = rev(term_name)))  # For plot ordering
ggplot(top_terms, aes(x = term_name, y = -log10(p_value), fill = source)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 Enriched Pathways (g:Profiler)",
x = "Pathway",
y = "-log10(p-value)"
) +
theme_minimal(base_size = 12)
# === 6. Save plot ===
ggsave("result/gprofiler_enrichment_plot.png", width = 10, height = 6, dpi = 300)
# Load libraries
library(gprofiler2)
library(ggplot2)
library(dplyr)
library(readr)
install.packages("readr")
# Load libraries
library(gprofiler2)
library(ggplot2)
library(dplyr)
library(readr)
# === Load top predictive genes ===
top_genes <- read_csv("data/top_predictive_features.csv")$gene
# === Run enrichment analysis ===
gostres <- gost(top_genes, organism = "hsapiens")
# === Save raw results ===
write_csv(gostres$result, "result/gprofiler_enrichment.csv")
# === Extract top 10 enriched terms for plot ===
top_terms <- gostres$result %>%
arrange(p_value) %>%
slice(1:10) %>%
mutate(term_name = factor(term_name, levels = rev(term_name)))  # for ordered bar plot
# === Set minimal theme for white background ===
theme_set(theme_minimal(base_size = 12))
# === Plot enrichment results ===
enrich_plot <- ggplot(top_terms, aes(x = term_name, y = -log10(p_value), fill = source)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 Enriched Pathways (g:Profiler)",
x = "Pathway",
y = "-log10(p-value)"
) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
legend.title = element_text(face = "bold"),
panel.grid.major = element_line(color = "gray85")
)
# === Save plot ===
ggsave("result/gprofiler_enrichment_plot.png", enrich_plot, width = 10, height = 6, dpi = 300)
# === Also display it if running interactively ===
print(enrich_plot)
# Load required libraries
library(gprofiler2)
library(dplyr)
library(ggplot2)
# === 1. Load top predictive genes ===
top_genes <- read.csv("data/top_predictive_features.csv")$gene
# === 2. Run g:Profiler enrichment (human genes) ===
gostres <- gost(top_genes, organism = "hsapiens")
# === 3. Flatten list columns before saving ===
gost_df <- gostres$result %>%
mutate(across(where(is.list), ~sapply(., toString)))
# === 4. Save results to CSV ===
dir.create("result", showWarnings = FALSE)
write.csv(gost_df, "result/gprofiler_enrichment.csv", row.names = FALSE)
# === 5. Plot top 10 enriched terms ===
top_terms <- gost_df %>%
arrange(p_value) %>%
slice(1:10) %>%
mutate(term_name = factor(term_name, levels = rev(term_name)))  # For plot ordering
ggplot(top_terms, aes(x = term_name, y = -log10(p_value), fill = source)) +
geom_col() +
coord_flip() +
labs(
title = "Top 10 Enriched Pathways (g:Profiler)",
x = "Pathway",
y = "-log10(p-value)"
) +
theme_minimal(base_size = 12)
# === 6. Save plot ===
ggsave("result/gprofiler_enrichment_plot.png", width = 10, height = 6, dpi = 300)
library(ReactomePA)
install.packages("ReactomePA")
install.packages("clusterProfiler")
library(ReactomePA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ReactomePA")
library(ReactomePA)
load("C:/Users/rishi/OneDrive/Desktop/Oncology_pipeline/.RData")
